/*
 * Retina Sprites for Compass
 * by:              Gaya Kessler
 * last update:     03/11/14
 *
 * Usage:
 * 1. create two folders in your image directory (in this case 'icons' and 'icons-2x').
 * 2. adjust the foldernames defined below if you use different names.
 * 3. create sprite images for pixel ratio 1 screens and put them in the first folder.
 * 4. create sprite images for pixel ratio 2 screens and put them in the second folder, use the same filenames.
 * 5. use the sprite-image in your Sass/Scss using: '@include use-sprite(<sprite-name>)'
 */

//first we'll define the folders where the sprites are and their layouts
//$brands: sprite-map("brands/*.png", $layout: smart);
//$brands-2x: sprite-map("brands-2x/*.png", $layout: smart);

//Sprite mixin, works perfectly with standard defines
//@mixin use-sprite($sprite) {
//  background-image: sprite-url($brands);
//  background-position: sprite-position($brands, $sprite);
//  background-repeat: no-repeat;
//  overflow: hidden;
//  display: block;
//  height: image-height(sprite-file($brands, $sprite));
//  width: image-width(sprite-file($brands, $sprite));
//
//  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
//    background-image: sprite-url($brands-2x);
//    background-size: (image-width(sprite-path($brands-2x)) / 2) (image-height(sprite-path($brands-2x)) / 2);
//    background-position: round(nth(sprite-position($brands-2x, $sprite), 1) / 2) round(nth(sprite-position($brands-2x, $sprite), 2) / 2);
//    height: image-height(sprite-file($brands-2x, $sprite)) / 2;
//    width: image-width(sprite-file($brands-2x, $sprite)) / 2;
//  }
//}

@mixin cf() {
  *zoom: 1;

  &:before, &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}


@function em($px, $base: $base-font-size) {
  @return ($px / $base) * 1em;
}

// Placeholder styling mixin
@mixin placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}
};

@mixin long-shadow($type, $color, $length, $fadeout: true, $skew: false, $direction: right){
  $shadow: '';
  @if $skew == false or $type == text{
    @if $direction == right {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
    @if $direction == left {
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $color + ',';
      }
    }
  }

  @if $fadeout == true{
    @for $i from 1 to $length - 1 {
      @if $type == text or $skew == false{
        @if $direction == right{
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left{
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
      }
      @if ($type == box) and $skew == true{
        @if $direction == right {
          $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
        @if $direction == left {
          $shadow: $shadow + $i * -1 + 'px ' + $i + 'px 0 ' + $i * .2 + 'px ' + rgba($color, 1 - $i / $length) + ',';
        }
      }
    }
    $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba($color, 0);
  }
  @if $fadeout == false{
    @if $skew == true and ( $type == box ){
      @for $i from 0 to $length - 1 {
        $shadow: $shadow + $i + 'px ' + $i + 'px 0 ' + $i * .1 + 'px ' + $color + ',';
      }
    }
    $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);
  }
  $shadow: unquote($shadow);
  @if $type == 'box' {box-shadow: $shadow;}
  @if $type == 'text' {text-shadow: $shadow;}
}
